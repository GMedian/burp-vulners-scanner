package burp.models;

import com.google.common.collect.Lists;
import org.json.JSONObject;

import java.util.List;

public class PathVulnerability extends Vulnerability {

    // TODO[gmedian]: set exploits
    // TODO[gmedian]: set cvss or something
    private List<String[]> exploits;
    private String parameter="";
    private String url="";
    private String position="";
    // description is in Base class

    private List<String> cwe=null;
    private boolean isOriginal=false;
    /*
    Since response may contain other urls, lets store them here and show as hints
    Because we cant technically claim that these URLs actually exist on the server
    We shouldn't add false positives
    */
    private List<PathVulnerability> potentials=Lists.newArrayList();

    private PathVulnerability(){}


    public static PathVulnerability fromWebVulns(String originalPath, JSONObject webVulnBulletin) {
        PathVulnerability vulnerability=null;
        List<PathVulnerability> potentials = Lists.newArrayList();
        String cveId = webVulnBulletin.optString("id");

        for (Object vuln : webVulnBulletin.getJSONObject("webApplicability").getJSONArray("vulnerabilities")) {
            JSONObject v = (JSONObject) vuln;
            if(v.getString("url").equals(originalPath)) {
                vulnerability = fromSingleWebVuln(cveId, v);
                vulnerability.setOriginal(true);
            }
            else {
                potentials.add(PathVulnerability.fromSingleWebVuln(cveId, v));
            }
        }

        if(vulnerability == null){
            vulnerability = new PathVulnerability();
        }

        potentials.forEach(vulnerability::addPotential);

        return vulnerability;
    }

    private static PathVulnerability fromSingleWebVuln(String cveId, JSONObject singleUrlBulletin){
        PathVulnerability vulnerability = new PathVulnerability();

        vulnerability.setId(cveId);
        // FIXME[gmedian]: set it by default since it doesnt come from server
        vulnerability.setType("cve");
        vulnerability.setParameter(singleUrlBulletin.optString("parameter",""));
        vulnerability.setUrl(singleUrlBulletin.optString("url",""));
        vulnerability.setPosition(singleUrlBulletin.optString("position",""));
        vulnerability.setDescription(singleUrlBulletin.optString("description",""));

        singleUrlBulletin.optJSONArray("cwe").forEach(cwe -> {
            vulnerability.addCWE((String) cwe);
        });

        return vulnerability;
    }

    private void searchForExploits(){

    }


//    public String getItemLink() {
//        return getItemLink(id);
//    }
//
//    public String getItemLink(String value) {
//        return String.format("<a href=\"https://vulners.com/%s/%s\" target=\"_blank\">%s</a>", type, id, value);
//    }
//
//    public void update(JSONObject vulnersIDBulletin) {
//        this.id = vulnersIDBulletin.optString("id", this.id);
//        this.type = vulnersIDBulletin.optString("type", this.type);
//        this.title = vulnersIDBulletin.optString("title", this.title);
//        this.description = vulnersIDBulletin.optString("description", this.description);
//
//        this.cvssScore = vulnersIDBulletin.optJSONObject("metrics", new JSONObject()).optJSONObject("cvss", new JSONObject()).optDouble("score", this.cvssScore);
//    }
//
//    public String getItemDescription() {
//        return description.length() > 256
//                ? description.substring(0, 256) + "..."
//                : description;
//    }

    private void addCWE(String cwe){
        if(this.cwe == null)
            this.cwe = Lists.newArrayList();
        this.cwe.add(cwe);
    }

    private void addPotential(PathVulnerability vuln){
        if(this.potentials == null)
            this.potentials = Lists.newArrayList();
        this.potentials.add(vuln);
    }

    @Override
    public void setExploits(List<String[]> exploits) {
        this.exploits = exploits;
    }

    public String getParameter() {
        return parameter;
    }

    public void setParameter(String parameter) {
        this.parameter = parameter;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getPosition() {
        return position;
    }

    public void setPosition(String position) {
        this.position = position;
    }

    public boolean isOriginal() {
        return isOriginal;
    }

    private void setOriginal(boolean original) {
        isOriginal = original;
    }

    public List<PathVulnerability> getPotentials() {
        return potentials;
    }
}
